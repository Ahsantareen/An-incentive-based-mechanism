#include <ilcplex/ilocplex.h>
ILOSTLBEGIN
typedef IloArray<IloNumVarArray>  IloNumVarArray2;

int main(int, char**) {
    IloEnv env;

    try {
        // Input data
        int totaltime = 5;
        float demand[5] = { 40,60,100,100,70 }; //load of MG
        float gridbuyprice[5] = { 100,100,120,120,110 }; //grid buy price
        float gridsellprice[5] = { 70,70,90,90,80 }; //grid sell price
        float mgbuyprice[5] = { 90,90,110,110,100 }; //internal trading between EV and MG buy price
        float mgsellprice[5] = { 80,80,100,100,90 };// internal trading between EV and MG sellprice
        float evsellprice[5] = { 70,70,95,95,80 }; // Trading from EV to grid sell price

        int i;
        int p;

        // EV inputs
        const int numev = 2; // number of EVs
        int evarr[numev] = { 1,4 }; // Arrival time
        int evpdep[numev] = { 3,4 }; // Depaerture time
        float evsocini[numev] = { 0.52, 0.71 }; // Initial SOC of EVs
        float evpbmax[numev] = { 54, 74 }; // Max capacity of EV battery


        //Battery inputs
        float socini = 0.2; // Battery initial SoC
        int pbmax = 100;//battery maximum capacity
        float effin = 0.95;//battery effciency

       //weights for the objectives
        float weight_cost = 0.3;
        float weight_ev_profit = 0.7;

        //Variables
        IloModel model(env);
        IloNumVarArray gridbuy(env, totaltime, 0, IloInfinity);
        IloNumVarArray gridsell(env, totaltime, 0, IloInfinity);
        IloNumVarArray statoc(env, totaltime, 0, 1);
        IloNumVarArray besschg(env, totaltime, 0, 100);
        IloNumVarArray bessdis(env, totaltime, 0, 100);

        //EV variables
        IloNumVarArray2 evtomg(env);
        for (p = 0; p < numev; p++)
        {
            evtomg.add(IloNumVarArray(env, totaltime, 0, IloInfinity));
        }
        IloNumVarArray2 evtogrid(env);
        for (p = 0; p < numev; p++)
        {
            evtogrid.add(IloNumVarArray(env, totaltime, 0, IloInfinity));
        }
        IloNumVarArray2 mgtoev(env);
        for (p = 0; p < numev; p++)
        {
            mgtoev.add(IloNumVarArray(env, totaltime, 0, IloInfinity));
        }
        IloNumVarArray2 gridtoev(env);
        for (p = 0; p < numev; p++)
        {
            gridtoev.add(IloNumVarArray(env, totaltime, 0, IloInfinity));
        }
        IloNumVarArray2 BSOC(env);
        for (p = 0; p < numev; p++)
        {
            BSOC.add(IloNumVarArray(env, totaltime, 0, 1));
        }
        IloNumVarArray2 Bchg(env);
        for (p = 0; p < numev; p++)
        {
            Bchg.add(IloNumVarArray(env, totaltime, 0.0, IloInfinity));
        }
        IloNumVarArray2 Bdis(env);
        for (p = 0; p < numev; p++)
        {
            Bdis.add(IloNumVarArray(env, totaltime, 0.0, IloInfinity));
        }



        IloExpr cost(env);
        IloExpr ev_profit(env);
        for (i = 0; i < totaltime; ++i) {
            for (p = 0; p < numev; ++p) {
                cost += gridbuyprice[i] * gridbuy[i] - gridsellprice[i] * gridsell[i] + mgbuyprice[i] * evtomg[p][i] - mgsellprice[i] * mgtoev[p][i];
                ev_profit += evsellprice[i] * evtogrid[p][i] + mgsellprice[i] * evtomg[p][i] - gridbuyprice[i] * gridtoev[p][i] - mgbuyprice[i] * mgtoev[p][i];
            }
        }

        model.add(IloMinimize(env, weight_cost * cost - weight_ev_profit * ev_profit));


        //constraints


        for (i = 0; i < totaltime; i++) {

            model.add(0 <= statoc[i]);
            model.add(statoc[i] <= 1);


            if (i >= 0 && i <= 5)

            {

                for (p = 0; p < 2; p++)
                {
                    if (i == evarr[p])
                    {
                        model.add(BSOC[p][i] == evsocini[p] + ((effin * Bchg[p][i] - (Bdis[p][i] / effin)) / evpbmax[p]));
                        model.add(0 <= Bchg[p][i]);
                        model.add(0 <= Bdis[p][i]);
                        model.add(Bchg[p][i] <= (evpbmax[p] * (1 - evsocini[p]) / effin));
                        model.add(Bdis[p][i] <= (evpbmax[p] * evsocini[p] * effin));
                        //model.add(gridtoev[p][i] + mgtoev[p][i] + Bchg[p][i] - Bdis[p][i] == evtogrid[p][i] + evtomg[p][i]);
                    }
                    else if (i > evarr[p] && i < evpdep[p])
                    {
                        model.add(BSOC[p][i] == BSOC[p][i - 1] + ((effin * Bchg[p][i] - (Bdis[p][i] / effin)) / evpbmax[p]));
                        model.add(0 <= Bchg[p][i]);
                        model.add(0 <= Bdis[p][i]);
                        model.add(Bchg[p][i] <= (evpbmax[p] * (1 - BSOC[p][i - 1])) / effin);
                        model.add(Bdis[p][i] <= evpbmax[p] * BSOC[p][i - 1] * effin);

                    }
                    else if (i == evpdep[p])
                    {
                        model.add(BSOC[p][i] == BSOC[p][i - 1] + ((effin * Bchg[p][i] - (Bdis[p][i] / effin)) / evpbmax[p]));
                        model.add(0 <= Bchg[p][i]);
                        model.add(0 <= Bdis[p][i]);
                        model.add(Bchg[p][i] <= (evpbmax[p] * (1 - BSOC[p][i - 1])) / effin);
                        model.add(Bdis[p][i] <= evpbmax[p] * BSOC[p][i - 1] * effin);
                        model.add(BSOC[p][i] >= 0.5);
                        //model.add(gridtoev[p][i] + mgtoev[p][i] + Bchg[p][i] - Bdis[p][i] == evtogrid[p][i] + evtomg[p][i]);

                    }
                    else
                    {
                        model.add(Bchg[p][i] == 0);
                        model.add(Bdis[p][i] == 0);
                    }
                    model.add(0 <= BSOC[p][i]);
                    model.add(BSOC[p][i] <= 1);
                    //model.add(gridtoev[p][i] + mgtoev[p][i] + Bchg[p][i] - Bdis[p][i] == evtogrid[p][i] + evtomg[p][i]);
                   model.add(mgtoev[p][i] + gridtoev[p][i] <= Bchg[p][i]);
                   model.add(evtomg[p][i] + evtogrid[p][i] <= Bdis[p][i]);

                }
            }

            //Battery constraints
            if (i == 0)
            {
                model.add(statoc[i] == socini + ((effin * besschg[i] - (bessdis[i] / effin)) / pbmax));
                model.add(0 <= besschg[i]);
                model.add(0 <= bessdis[i]);
                model.add(besschg[i] <= (pbmax * (1 - socini) / effin));
                model.add(bessdis[i] <= (pbmax * socini * effin));
            }
            else
            {
                model.add(statoc[i] == statoc[i - 1] + ((effin * besschg[i] - (bessdis[i] / effin)) / pbmax));
                model.add(0 <= besschg[i]);
                model.add(0 <= bessdis[i]);
                model.add(besschg[i] <= (pbmax * (1 - statoc[i - 1])) / effin);
                model.add(bessdis[i] <= pbmax * statoc[i - 1] * effin);
            }
         
            model.add(gridbuy[i] + bessdis[i] + evtomg[0][i] + evtomg[1][i] == demand[i] + gridsell[i] + besschg[i] + mgtoev[0][i] + mgtoev[1][i]);
            model.add(gridtoev[0][i] + mgtoev[0][i] + Bchg[0][i] - Bdis[0][i]+ gridtoev[1][i] + mgtoev[1][i] + Bchg[1][i] - Bdis[1][i] == evtogrid[0][i] + evtomg[0][i]+ evtogrid[1][i] + evtomg[1][i]);

        }


        // Solve the model
        IloCplex cplex(env);
        cplex.extract(model);
        cplex.solve();
        cout << "Solution status: " << cplex.getStatus() << endl;
        cout << "Minimized Objective Function " << cplex.getObjValue() << endl;

        for (int p = 0; p < numev; p++) {
            std::cout << "EV " << p + 1 << ":" << std::endl;
            for (int i = 0; i < totaltime; i++) {
                std::cout << cplex.getValue(mgtoev[p][i]) << "\t" << cplex.getValue(gridtoev[p][i]) <<"\t"<< cplex.getValue(evtomg[p][i])<<"\t"<< cplex.getValue(evtogrid[p][i])<<"\t"<<std::endl;
            }
            std::cout << std::endl;
        }
        IloNum eps = cplex.getParam(IloCplex::Param::MIP::Tolerances::Integrality);
    }
    catch (IloException& ex) {
        cerr << "Error: " << ex << endl;
    }

    env.end();
    system("pause");
    return 0;
}